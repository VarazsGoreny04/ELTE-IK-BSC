inc x = x + 1
square x = x * x
squareinc x = square (inc x) = (inc x) * (inc x)

Szigorú/Mohó (Strict) kiértékelés:
squareinc 7 -> square (inc 7)
	    -> square (7 + 1) <- Átírás folyamata (rewriting)
	    -> square 8
	    -> 8 * 8
	    -> 64
A függvény argumentumával kezd el foglalkozni először

Lusta (Lazy) kiértékelés:
squareinc 7 -> square (inc 7)
	    -> (inc 7) * (inc 7)
	    -> square 8
	    -> 8 * 8
	    -> 64
(A mohó nem mindig találja meg az eredményt, de a lusta mindig megtalálja, ha az eredmény kiszámítható)

Vagy párhuzamos kiértékelés gráfátírással

A műveletek definíciója az előre definiált műveletek könyvtárába van beírva
Ha a nyelv tisztán funkcionális, a műveletek sorrendje szabadon választható, az eredmény mindig ugyan az lesz

hd[1, 2, 4, 7] <- Head függvény(Az lista fejét adja vissza)
Eredmény: 1

[1, 3..8] <- A lista felső korlátát adja meg az utolsó szám a két pont után
Eredmény: [1, 3, 5, 7]

sum[1..100] = [1, 2..100]
Eredmény: 5050

[1..] <- Végtelen
Eredmény: [1, 2, 3, 4, 5, 6, 7...
Nem fog megtelni a memória, mivel a nem felhasznált értékeket a rendszer felszabadítja!

hd[1..] <- Csak a lusta fogja tudni kiszámolni, mivel a mohó beleragad a végtelen sorozatba
A lusta eredménye: 1

f x y = 2 * x <- Hibás is lehet, de ez attól függ, hogy melyik kiértékelést használjuk
f 3 [1..] <- Csak a lusta fogja tudni kiszámolni, mivel a mohó beleragad a végtelen sorozatba
A lusta eredménye: 6

Rekurzió: Feladatfelbontást jelent. Úgy definiáljuk a függvényt, hogy saját magát szerepeltetjük a definíciójában.
fakt 0
Eredmény: 1

!n = n * (n - 1) * ... * (n - n)
fakt 3 = 3 * (fakt (3 - 1)) = 3 * ( 2 * fakt (3 - 2)) = 3 * (2 * (1)) = 3 * (2 * (1 * fakt (3 - 3))) =  3 * (2 * (1 * (0))) = 3 * 2 * 1 * 0 = 6

g x = g x
g 5
Eredmény: g 5 = g 5 = g 5 = g 5 = g 5...

f x y = 2 * x
f 3 (g 5) <- Csak a lusta fogja tudni kiszámolni, mivel a mohó beleragad a (g 5) végtelen sorozatába
A lusta eredménye: 6

--------------------------------------
Egyszerű funkcionális program:

module Test
import StdEnv

Start =
// 5 + 2 * 3			<- Infix függvényhasználat
   (+) 5 6			<- Prefix függvényhasználat
// sum [1..10]
// reverse (sort [1, 6, 2, 7])	<- Visszaadja a fordítva rendezett sorozatot (!Nem rendezi a sorozatot és megfordítja vagy fordítva!)
// 1 < 2 && 3 < 4
// 2 < 1 || 3 < 4
// [0:[1, 2]] ++ [3, 4, 5]
// and [True]