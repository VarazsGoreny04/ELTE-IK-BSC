tail [5] ~> [] :: [Int]
	 ~> [] :: [Char]	// Polimorf függvények üres listáit nem lehet típus szerint vizsgálni

tail []  =  []
tail [a] -> [a]			// Ez így helyes mert meg van adva a kimenet típusa

A sum egy polimorf függvény
sum [] = 0			// Ez viszont csak az egész számokra adhat vissza eredményt
sum [x:xs] = x + sum xs		// Az összeadás több számtípusra is definiálva van,
				   de csak egész számokra tud visszaadni egész típusú eredményt

length [] = 0			// Polimorf függvény
length [_:xs] = 1 + length xs	// A Joker !minta! azt jelenti, hogy az aktuális érték paraméterét
				   nem kötöm hozzá egy azonosítóhoz
típusa:
length :: [a] -> Int		// Ez Haskell-ben jó, viszont Clean-ben nem!
				// A Clean nem ezt várja hanem egy (a b) | length a típuskikötést

Az (a b) | length a ezekre is értelmezhető:
([] Int)
([] [Int])
([] Char)
([] String)
([] Double)
(Tree Int)
stb...

Start :: Int
Start = 3 + 4			// Semmiből képez értéket és mindig konstan módon ugyanazt adja vissza

derive = Haskell-ben és Clean-ben a "találd ki helyettem az általános függvénydefiníciót" kulcsszava
Fract = Haskell-ben a valós szám definíciója
* (uniqness annotáció) = Egyszer használatos változó megkötése
! (monóság annotáció) = Mindenképp mohón értékel ki

Polimorf típusok:
-----------------
Parametrikus polimorfizmus (head)
Ad-hoc polimorfizmus (+)	//Egy függvénynek sok különböző implementációja van, amelyeket egyenként 				  specifikálnak néhány különböző típus és kombinációja számára

Ad-hoc polimorfizmus:
2    +     3			(+) :: Int -> Int -> Int
3.7  +   4.8			(+) :: Real -> Real -> Real
True + False			(+) :: Bool -> Bool -> Bool (Haskell-ben nincs)

Ad-hoc polimorfizmusnál nem kell megírni a definícót, a példához igazodik

Definiálod a függvényt -> létrejön egy példány (instance)

Class kulcsszóval definiált függvényeket úgy értelmez a fordító hogy az több típusosztályra is értelmezhető
class (+) infix 6 a :: !a -> !a -> a